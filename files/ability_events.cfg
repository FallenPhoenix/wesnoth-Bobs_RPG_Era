#textdomain wesnoth-Bobs_RPG_Era

####################################################################################
# Abilities
####################################################################################

#####################
# Surprise
#####################

#define BOB_SURPRISE
	[event]
		name=moveto
		first_time_only=no
		[filter]
			[filter_adjacent]
				is_enemy=yes
				[filter_wml]
					[attack]
						[specials]
							[dummy]
								id=surprise
							[/dummy]
						[/specials]
					[/attack]
				[/filter_wml]
			[/filter_adjacent]
		[/filter]
		
	[store_unit]
		[filter]
			x,y=$x1,$y1
		[/filter]
		variable=target
	[/store_unit]
	
	[store_unit]
		[filter]
			[filter_wml]
				[attack]
					[specials]
						[dummy]
							id=surprise
						[/dummy]
					[/specials]
				[/attack]
			[/filter_wml]
			[filter_adjacent]
				x,y=$x1,$y1
			[/filter_adjacent]
		[/filter]
		variable=attacker
	[/store_unit]
		
	{FOREACH attacker i}
		
		{VARIABLE temp_damage $attacker[$i].attack[0].damage}
		{VARIABLE_OP temp_damage multiply $target.resistance.$attacker.attack[0].type}
		{VARIABLE_OP temp_damage divide 100}
		
		[unstore_unit]
			variable=attacker[$i]
		[/unstore_unit]
		
		[animate_unit]
			flag=attack
			with_bars=yes
			hits=yes
			[filter]
				[filter_wml]
					[attack]
						[specials]
							[dummy]
								id=surprise
							[/dummy]
						[/specials]
					[/attack]
				[/filter_wml]
				[filter_adjacent]
					x,y=$x1,$y1
				[/filter_adjacent]
			[/filter]
			[primary_attack]
				range=melee
			[/primary_attack]
			[facing]
				x,y=$x1,$y1
			[/facing]
		[/animate_unit]
		
		[animate_unit]
			flag=defend
			with_bars=yes
			hits=yes
			[filter]
				x,y=$x1,$y1
			[/filter]
			[primary_attack]
				range=melee
			[/primary_attack]
		[/animate_unit]
		
		[unstore_unit]
			variable=target
			text="$temp_damage"
			{COLOR_HARM}
		[/unstore_unit]
		
		[object]
			silent=yes
			duration=forever
			[filter]
				x,y=$x1,$y1
			[/filter]
			[effect]
				apply_to=hitpoints
				increase=-$temp_damage
			[/effect]
		[/object]
	
	{NEXT i}
	
		{CLEAR_VARIABLE temp_damage}
		{CLEAR_VARIABLE attacker}	
		{CLEAR_VARIABLE target}	
	[/event]
#enddef

#####################
# Mentor
#####################

#define BOB_MENTOR
	[event]
		name=die
		first_time_only=no
		
		[filter_second]
			ability=mentor
		[/filter_second]
		
		[store_unit]
			[filter]
				[filter_adjacent]
					x,y=$x2,$y2
					is_enemy=no
				[/filter_adjacent]
			[/filter]
			variable=learner
		[/store_unit]
		
		{FOREACH learner i}
		
			{VARIABLE_OP learner[$i].experience add $unit.level}
			
			[unstore_unit]
				variable=learner[$i]
				text=_ "$unit.level XP"
				{COLOR_HEAL}
			[/unstore_unit]
	
		{NEXT i}

		{CLEAR_VARIABLE learner}
	[/event]
#enddef

####################################################################################
# Weapon Specials
####################################################################################

#define BOB_REMOVE_TEMP_BONUSES

# Remove energised

[event]
	name=attack_end
	first_time_only=no
	[filter_attack]
		special=energised
	[/filter_attack]
	{VARIABLE unit.moves $unit.max_moves}
	{BOB_FLOATER x=$x1 y=$y1 (Energised) green}
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 melee energised}
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 ranged energised}
[/event]

# Show frenzy label

[event]
	name=attack
	first_time_only=no
	[filter_attack]
		special=frenzy
	[/filter_attack]
	{BOB_FLOATER x=$x1 y=$y1 Frenzy red}
[/event]

# Remove frenzy
	
[event]
	name=attack_end
	first_time_only=no
	[filter_attack]
		special=frenzy
	[/filter_attack]
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 melee frenzy}
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 ranged frenzy}
[/event]
	
# Remove bloodlust

[event]
	name=attack_end
	first_time_only=no
	[filter_attack]
		special=bloodlust
	[/filter_attack]
	{VARIABLE unit.attacks_left 1}
	{BOB_FLOATER x=$x1 y=$y1 (Bloodlust) green}
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 melee bloodlust}
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 ranged bloodlust}
[/event]

# Remove roused

[event]
	name=moveto
	first_time_only=no
	[filter]
		ability=temp_roused
		[not]
			[filter_wml]
				moves="$($this_unit.max_moves-1)"
			[/filter_wml]
		[/not]
	[/filter]
	[object]
		silent=yes
		duration=forever
		[filter]
			x=$x1
			y=$y1
		[/filter]
		[effect]
			apply_to=remove_ability
			[abilities]
				{ABILITY_ROUSED}
			[/abilities]
		[/effect]
		[effect]
			apply_to=movement
			increase=-2
		[/effect]
	[/object]
[/event]

# Restore the rousers option to rouse again

[event]
	name="turn refresh"
	first_time_only=no
	
	[store_unit]
		[filter]
			side=$side_number
			canrecruit=yes
			[filter_wml]
				[modifications]
					[trait]
						id=rouser
					[/trait]
				[/modifications]
				[variables]
					has_roused=yes
				[/variables]
			[/filter_wml]
		[/filter]
		variable=stored_unit
	[/store_unit]
	{VARIABLE stored_unit.variables.has_roused no}
	[unstore_unit]
		variable=stored_unit
	[/unstore_unit]
[/event]

# Remove Weaponcraft bonus - player attacks

[event]
	name=attack_end
	first_time_only=no
	[filter_attack]
		special=temp_poison
	[/filter_attack]
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 melee temp_poison}
[/event]

[event]
	name=attack_end
	first_time_only=no
	[filter_attack]
		special=temp_slow
	[/filter_attack]
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 melee temp_slow}
[/event]

[event]
	name=attack_end
	first_time_only=no
	[filter_attack]
		special=temp_sharpened
	[/filter_attack]
	{BOB_REMOVE_SPECIALS x=$x1 y=$y1 melee temp_sharpened}
	{BOB_MODIFY_ATTACK x=$x1 y=$y1 melee damage -$character[$side_number].melee_weapon_temp_damage_bonus ($character[$side_number].melee_weapon_name)}
	{VARIABLE character[$unit.side].melee_weapon_temp_damage_bonus 0}
[/event]

# Remove Weaponcraft bonus - player is attacked

[event]
	name=attack_end
	first_time_only=no
	[filter_second_attack]
		special=temp_poison
	[/filter_second_attack]
	{BOB_REMOVE_SPECIALS x=$x2 y=$y2 melee temp_poison}
[/event]

[event]
	name=attack_end
	first_time_only=no
	[filter_second_attack]
		special=temp_slow
	[/filter_second_attack]
	{BOB_REMOVE_SPECIALS x=$x2 y=$y2 melee temp_slow}
[/event]

[event]
	name=attack_end
	first_time_only=no
	[filter_second_attack]
		special=temp_sharpened
	[/filter_second_attack]
	{BOB_REMOVE_SPECIALS x=$x2 y=$y2 melee temp_sharpened}
	{BOB_MODIFY_ATTACK x=$x2 y=$y2 melee damage -$character[$second_unit.side].melee_weapon_temp_damage_bonus ($character[$second_unit.side].melee_weapon_name)}
	{VARIABLE character[$second_unit.side].melee_weapon_temp_damage_bonus 0}
[/event]
#enddef

####################################################################################
# Weapon Specials
####################################################################################


#define BOB_CRITICAL_HITS
[event]
	name="attacker hits"
	first_time_only=no
	{VARIABLE critical_hitter yes}
[/event]

[event]
	name="attack end"
	first_time_only=no
		
	# If the opponent is still alive
	[if]
		{BOB_CONDITION second_unit.hitpoints greater_than_equal_to 1}
		{BOB_CONDITION critical_hitter equals yes}
		[then]
			
			# Check for a critical hit
			{RANDOM 1..100}
			[if]
				{BOB_CONDITION random less_than_equal_to $unit.variables.critical_chance}
				[then]
				
					# Check which type of critical hit is dealt
					{RANDOM Maimed,Blinded,Crippled,Brained}
					[switch]
						variable=random
						
						# Maimed
						[case]
						value=Maimed
							[if]
								{BOB_CONDITION second_unit.variables.maimed not_equals yes}
								[then]
									{BOB_STORE_UNIT x=$x2 y=$y2 ({VARIABLE stored_unit.variables.maimed yes})}
									{BOB_FLOATER x=$x2 y=$y2 (Maimed) red}
									[object]
										silent=yes
										duration=forever
										[filter]
											x=$x2
											y=$y2
										[/filter]
										[effect]
											apply_to=attack
											range=melee
											[set_specials]
												mode=append
												{WEAPON_SPECIAL_MAIMED}
											[/set_specials]
										[/effect]
										[effect]
											apply_to=attack
											range=ranged
											[set_specials]
												mode=append
												{WEAPON_SPECIAL_MAIMED}
											[/set_specials]
										[/effect]
									[/object]
								[/then]
							[/if]
						[/case]
						
						# Blinded
						[case]
						value=Blinded
							[if]
								{BOB_CONDITION second_unit.variables.blinded not_equals yes}
								[then]
									{BOB_STORE_UNIT x=$x2 y=$y2 ({VARIABLE stored_unit.variables.blinded yes})}
									{BOB_FLOATER x=$x2 y=$y2 (Blinded) red}
									[object]
										silent=yes
										duration=forever
										[filter]
											x=$x2
											y=$y2
										[/filter]
										[effect]
											apply_to=attack
											range=melee
											[set_specials]
												mode=append
												{WEAPON_SPECIAL_BLINDED}
											[/set_specials]
										[/effect]
										[effect]
											apply_to=attack
											range=ranged
											[set_specials]
												mode=append
												{WEAPON_SPECIAL_BLINDED}
											[/set_specials]
										[/effect]
									[/object]
								[/then]
							[/if]
						[/case]
						
						# Crippled
						[case]
						value=Crippled
							[if]
								{BOB_CONDITION second_unit.variables.crippled not_equals yes}
								[then]
									{BOB_STORE_UNIT x=$x2 y=$y2 ({VARIABLE stored_unit.variables.crippled yes})}
									{BOB_FLOATER x=$x2 y=$y2 (Crippled) red}
									[object]
										silent=yes
										duration=forever
										[filter]
											x=$x2
											y=$y2
										[/filter]
										[effect]
											apply_to=movement
											increase=-2
										[/effect]
										[effect]
											apply_to=new_ability
											[abilities]
												{ABILITY_CRIPPLED}
											[/abilities]
										[/effect]
									[/object]
								[/then]
							[/if]
						[/case]
						
						# Brained
						[case]
						value=Brained
							[if]
								{BOB_CONDITION second_unit.variables.brained not_equals yes}
								[then]
									{BOB_STORE_UNIT x=$x2 y=$y2 ({VARIABLE stored_unit.variables.brained yes})}
									{BOB_FLOATER x=$x2 y=$y2 (Brained) red}
									[object]
										silent=yes
										duration=forever
										[filter]
											x=$x2
											y=$y2
										[/filter]
										[effect]
											apply_to=new_ability
											[abilities]
												{ABILITY_BRAINED}
											[/abilities]
										[/effect]
									[/object]
								[/then]
							[/if]
						[/case]
						
					[/switch]
					
				[/then]
			[/if]
			
			{CLEAR_VARIABLE random}
		[/then]
	[/if]
	{CLEAR_VARIABLE critical_hitter}
[/event]

# Removing the critical hits

[event]
	name="turn refresh"
	first_time_only=no

	# Maimed
	[store_unit]
		[filter]
			side=$side_number
			[filter_wml]
				hitpoints=$this_unit.max_hitpoints
				[variables]
					maimed=yes
				[/variables]
			[/filter_wml]
		[/filter]
		variable=units
	[/store_unit]
	
	{FOREACH units i}
	
		{VARIABLE units[$i].variables.maimed no}
		{VARIABLE maimed_x $units[$i].x}
		{VARIABLE maimed_y $units[$i].y}
		[unstore_unit]
			variable=units[$i]
			text="Healed"
			{COLOR_HEAL}
		[/unstore_unit]
		[object]
			silent=yes
			duration=forever
			[filter]
				side=$side_number
				x=$maimed_x
				y=$maimed_y
			[/filter]
			[effect]
				apply_to=attack
				range=melee
				remove_specials=maimed
			[/effect]
			[effect]
				apply_to=attack
				range=ranged
				remove_specials=maimed
			[/effect]
		[/object]

	{NEXT i}
	{CLEAR_VARIABLE units}
	{CLEAR_VARIABLE maimed_x}
	{CLEAR_VARIABLE maimed_y}

	# Blinded
	[store_unit]
		[filter]
			side=$side_number
			[filter_wml]
				hitpoints=$this_unit.max_hitpoints
				[variables]
					blinded=yes
				[/variables]
			[/filter_wml]
		[/filter]
		variable=units
	[/store_unit]
	
	{FOREACH units i}
	
		{VARIABLE units[$i].variables.blinded no}
		{VARIABLE blinded_x $units[$i].x}
		{VARIABLE blinded_y $units[$i].y}
		[unstore_unit]
			variable=units[$i]
			text="Healed"
			{COLOR_HEAL}
		[/unstore_unit]
		[object]
			silent=yes
			duration=forever
			[filter]
				side=$side_number
				x=$blinded_x
				y=$blinded_y
			[/filter]
			[effect]
				apply_to=attack
				range=melee
				remove_specials=blinded
			[/effect]
			[effect]
				apply_to=attack
				range=ranged
				remove_specials=blinded
			[/effect]
		[/object]

	{NEXT i}
	{CLEAR_VARIABLE units}
	{CLEAR_VARIABLE blinded_x}
	{CLEAR_VARIABLE blinded_y}

	# Crippled
	[store_unit]
		[filter]
			side=$side_number
			[filter_wml]
				hitpoints=$this_unit.max_hitpoints
				[variables]
					crippled=yes
				[/variables]
			[/filter_wml]
		[/filter]
		variable=units
	[/store_unit]
	
	{FOREACH units i}
	
		{VARIABLE units[$i].variables.crippled no}
		{VARIABLE_OP units[$i].moves add 2}
		{VARIABLE crippled_x $units[$i].x}
		{VARIABLE crippled_y $units[$i].y}
		[unstore_unit]
			variable=units[$i]
			text="Healed"
			{COLOR_HEAL}
		[/unstore_unit]
		[object]
			silent=yes
			duration=forever
			[filter]
				side=$side_number
				x=$crippled_x
				y=$crippled_y
			[/filter]
			[effect]
				apply_to=remove_ability
				[abilities]
					{ABILITY_CRIPPLED}
				[/abilities]
			[/effect]
			[effect]
				apply_to=movement
				increase=2
			[/effect]
		[/object]

	{NEXT i}
	{CLEAR_VARIABLE units}
	{CLEAR_VARIABLE crippled_x}
	{CLEAR_VARIABLE crippled_y}

	# Brained
	[store_unit]
		[filter]
			side=$side_number
			[filter_wml]
				hitpoints=$this_unit.max_hitpoints
				[variables]
					brained=yes
				[/variables]
			[/filter_wml]
		[/filter]
		variable=units
	[/store_unit]
	
	{FOREACH units i}
	
		{VARIABLE units[$i].variables.brained no}
		{VARIABLE brained_x $units[$i].x}
		{VARIABLE brained_y $units[$i].y}
		[unstore_unit]
			variable=units[$i]
			text="Healed"
			{COLOR_HEAL}
		[/unstore_unit]
		[object]
			silent=yes
			duration=forever
			[filter]
				side=$side_number
				x=$brained_x
				y=$brained_y
			[/filter]
			[effect]
				apply_to=remove_ability
				[abilities]
					{ABILITY_BRAINED}
				[/abilities]
			[/effect]
		[/object]

	{NEXT i}
	{CLEAR_VARIABLE units}
	{CLEAR_VARIABLE brained_x}
	{CLEAR_VARIABLE brained_y}

	# Brained units lose 1xp

	[store_unit]
		[filter]
			side=$side_number
			ability=brained
			[filter_wml]
				[not]
					experience=0
				[/not]
			[/filter_wml]
		[/filter]
		variable=units
	[/store_unit]

	{FOREACH units i}
		{VARIABLE_OP units[$i].experience add -1}
		[unstore_unit]
			variable=units[$i]
			text="-1xp"
			{COLOR_WHITE}
		[/unstore_unit]
	{NEXT i}
	{CLEAR_VARIABLE units}	

# Ensuring all units have a critical hit chance

[store_unit]
	[filter]
		side=$side_number
		[filter_wml]
			[variables]
				[not]
					criticals_enabled=yes
				[/not]
			[/variables]
		[/filter_wml]
	[/filter]
	variable=units
[/store_unit]

	{FOREACH units i}
		
		# The formula for assigning critical hit chance: (unit level + 1)*5
		# lvl0 - 5
		# lvl1 - 10
		# lvl2 - 15
		# lvl3 - 20
		# lvl4 - 25
		# lvl5 - 30
		{VARIABLE temp_factor $units[$i].level}
		{VARIABLE_OP temp_factor add 1}
		{VARIABLE_OP temp_factor multiply 5}
		{VARIABLE units[$i].variables.critical_chance $temp_factor}
		{VARIABLE units[$i].variables.criticals_enabled yes}
	
		[unstore_unit]
			variable=units[$i]
		[/unstore_unit]
			
	{NEXT i}
	
{CLEAR_VARIABLE temp_factor}	
{CLEAR_VARIABLE units}
[/event]

# When a non-character unit levels up, its critical chance improves by 5%

[event]
name="post advance"
first_time_only=no
[filter]
	[not]
		[filter_wml]
			[variables]
				character_status=active
			[/variables]
		[/filter_wml]
	[/not]
[/filter]
#{BOB_STORE ({VARIABLE_OP stored_unit.variables.critical_chance add 5})}
[store_unit]
	[filter]
		x=$x1
		y=$y1
	[/filter]
	variable=stored_unit
[/store_unit]
{VARIABLE_OP stored_unit.variables.critical_chance add 5}
[unstore_unit]
	advance=no
	variable=stored_unit
[/unstore_unit]
{CLEAR_VARIABLE stored_unit}

[/event]




#enddef


