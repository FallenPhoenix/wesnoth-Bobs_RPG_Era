####################################################################################
# Special Macros
####################################################################################

#define AMLA_BOB
    [advancement]
        strict_amla=yes
        max_times=100
        id=bob
        description= _ "+10 Character Points, +20% Max XP"
        image="misc/cp-overlay.png"
        [effect]
            apply_to=hitpoints
            #increase_total=3
            heal_full=yes
        [/effect]
        [effect]
            apply_to=max_experience
            increase=20%
        [/effect]
        [effect]
            apply_to=status
            remove=poisoned
        [/effect]
        [effect]
            apply_to=status
            remove=slowed
        [/effect]
    [/advancement]
#enddef

#define BOB_SCATTER_ITEMS ITEM PERCENTAGE TERRAIN
	[store_locations]
		terrain={TERRAIN}
		variable=tile
	[/store_locations]
	 
	{FOREACH tile i}

		{RANDOM 1..100}
		
			[if]
				{BOB_CONDITION random less_than_equal_to {PERCENTAGE}}
				[then]
					[store_locations]
						x=$tile[$i].x 
						y=$tile[$i].y
						variable={ITEM}_xy
						[or]
							find_in={ITEM}_xy
						[/or]
					[/store_locations]
					{PLACE_IMAGE items/{ITEM}.png $tile[$i].x $tile[$i].y}
				[/then]
			[/if]
				
	{NEXT i}

	{CLEAR_VARIABLE tile}
	{CLEAR_VARIABLE random}
#enddef

#define BOB_PLACE_SHOP_ON_LEADER SIDE
	[store_side]
		side={SIDE}
		variable=side
	[/store_side]
	[if]
		[have_unit]
			side={SIDE}
			canrecruit=yes
		[/have_unit]
		{BOB_CONDITION side.controller equals human}
		[then]
			[store_starting_location] 
				side={SIDE}
				variable=location
			[/store_starting_location]
			{VARIABLE shop_{SIDE}.x $location.x}
			{VARIABLE shop_{SIDE}.y $location.y}
			{BOB_PLACE_GENERIC_SHOP Shop (shop_{SIDE}) scenery/tent-fancy-red.png $shop_{SIDE}.x $shop_{SIDE}.y}
			{CLEAR_VARIABLE location}
		[/then]
	[/if]
#enddef
	
	
#define BOB_CREATE_CONJURED_UNIT TYPE
{BOB_REDRAW}
{BOB_SOUND magic-missile-1-miss.ogg,magic-missile-2-miss.ogg,magic-missile-3-miss.ogg}
[item]
	x=$x1
	y=$y1
	#halo="scenery/fire1.png:150,scenery/fire2.png:150,scenery/fire3.png:150,scenery/fire4.png:150"
	halo="halo/teleport-9.png:70,halo/teleport-8.png:70,halo/teleport-1.png:70,halo/teleport-2.png:70,halo/teleport-3.png:70,halo/teleport-4.png:70,halo/teleport-5.png:70,halo/teleport-6.png:70,halo/teleport-7.png:70,halo/teleport-8.png:70,halo/teleport-9.png:70"
[/item]
{BOB_REDRAW}
[unit]
side=$side_number
type={TYPE}
random_traits=no
animate=yes
x=$x1
y=$y1
upkeep=0
[modifications]
{BOB_ADD_ABILITY CONJURED}
[/modifications]	
[/unit]
{BOB_REDRAW}
{BOB_DELAY 100}
[remove_item]
	x=$x1
	y=$y1
[/remove_item]
{BOB_REDRAW}
#enddef


####################################################################################
# Death Macros
####################################################################################


#define BOB_CREATURE_DEATH FILTER_1 VAR
[event]
name=die
first_time_only=no
[filter]
	{FILTER_1}
	[not]
		[filter_location]
			terrain="Xu,Xos,^Xo,Xv,Qlf,Ql,Qxu,Wo,Ww,Mm^Xm,Md^Xm"
		[/filter_location]
	[/not]
	#[not]
	#	ability=conjured
	#[/not]
[/filter]
{PLACE_IMAGE items/{VAR}.png $x1 $y1}
[store_locations]
	variable={VAR}_xy
	find_in={VAR}_xy
	[or]
		x,y=$x1,$y1
	[/or]
[/store_locations]
[/event]
#enddef


#define BOB_CHARACTER_DEATH
[event]
	name=die
	first_time_only=no
	[filter]
		canrecruit=yes
		[filter_wml]
			[variables]
				character_status=active
			[/variables]
		[/filter_wml]
	[/filter]
	{PLACE_IMAGE items/bones_and_backpack.png $x1 $y1}
    # the following will store this unit into an array containing all dead characters
	[store_unit]
		[filter]
			x,y=$x1,$y1
		[/filter]
		kill=no
		mode=append
		variable=dead_characters
	[/store_unit]
[/event]
#enddef

####################################################################################
# Inventory Macros
####################################################################################

#define BOB_PICK_UP VAR MESSAGE
[event]
 name=moveto
 first_time_only=no
 [filter]
  [filter_location]
   find_in={VAR}_xy
  [/filter_location]
  side=$side_number
  canrecruit=yes
	[filter_wml]
		[variables]
			character_status=active
		[/variables]
	[/filter_wml]
 [/filter]
{VARIABLE_OP inventory[$side_number].{VAR} add 1}
{BOB_SOUND skeleton-hit-2.ogg}
[remove_item]
	x,y=$x1,$y1
[/remove_item]
 [store_locations]
  variable={VAR}_xy
  find_in={VAR}_xy
  [not]
   x,y=$x1,$y1
  [/not]
 [/store_locations]
{BOB_PRINT ("$character[$side_number].name {MESSAGE}")}
[/event] 
#enddef


#define BOB_PICK_UP_DEAD_CHARACTER_STUFF
[event]
	name=moveto
	first_time_only=no
	[filter]
		canrecruit=yes
		[filter_wml]
			[variables]
				character_status=active
			[/variables]
		[/filter_wml]
		# stored units contain x and y keys, so find_in= can operate on
		# arrays of stored units as well as arrays of stored locations
		[filter_location]
			find_in=dead_characters
		[/filter_location]
	[/filter]

	{FOREACH dead_characters i}
		[if]
			{BOB_CONDITION dead_characters[$i].x equals $x1}
			{BOB_CONDITION dead_characters[$i].y equals $y1}
			[then]
				# do what you do here, the dead character being stepped on is
				# stored in dead_characters[$i]


{BOB_PRINT ("$character[$side_number].name has picked up $character[$dead_characters[$i].side].name|'s inventory")}
{BOB_SOUND skeleton-hit-2.ogg}
[remove_item]
	x=$x1
	y=$y1
	image=items/bones_and_backpack.png
[/remove_item]
{PLACE_IMAGE items/bones.png $x1 $y1}
# Inventory: Gold
[store_side]
	side=$dead_characters[$i].side
	variable=dead
[/store_side]
[if]
	{BOB_CONDITION dead.gold greater_than 0}
	[then]
		{BOB_GOLD $side_number $dead.gold}
		{BOB_GOLD $dead_characters[$i].side -$dead.gold}
	[/then]
[/if]
# Inventory: Potions (Red)
{VARIABLE_OP inventory[$side_number].endurance_potion add $inventory[$dead_characters[$i].side].endurance_potion}
{VARIABLE_OP inventory[$side_number].stamina_potion add $inventory[$dead_characters[$i].side].stamina_potion}
{VARIABLE_OP inventory[$side_number].health_potion add $inventory[$dead_characters[$i].side].health_potion}
{VARIABLE_OP inventory[$side_number].life_potion add $inventory[$dead_characters[$i].side].life_potion}
# Inventory: Potions (Purple)
{VARIABLE_OP inventory[$side_number].mind_juice add $inventory[$dead_characters[$i].side].mind_juice}
{VARIABLE_OP inventory[$side_number].brainhaste_tonic add $inventory[$dead_characters[$i].side].brainhaste_tonic}
# Inventory: Potions (Green)
{VARIABLE_OP inventory[$side_number].antidote_potion add $inventory[$dead_characters[$i].side].antidote_potion}
{VARIABLE_OP inventory[$side_number].speed_serum add $inventory[$dead_characters[$i].side].speed_serum}
# Inventory: Potions (Blue)
{VARIABLE_OP inventory[$side_number].energy_cocktail add $inventory[$dead_characters[$i].side].energy_cocktail}
{VARIABLE_OP inventory[$side_number].bloodlust_bile add $inventory[$dead_characters[$i].side].bloodlust_bile}
{VARIABLE_OP inventory[$side_number].frenzy_fluid add $inventory[$dead_characters[$i].side].frenzy_fluid}
# Inventory: Misc Items

{VARIABLE_OP inventory[$side_number].magic_bean add $inventory[$dead_characters[$i].side].magic_bean}
{VARIABLE_OP inventory[$side_number].tent add $inventory[$dead_characters[$i].side].tent}
{VARIABLE_OP inventory[$side_number].map add $inventory[$dead_characters[$i].side].map}
{VARIABLE_OP inventory[$side_number].suicide_bomb add $inventory[$dead_characters[$i].side].suicide_bomb}
{VARIABLE_OP inventory[$side_number].tongue_of_mockery add $inventory[$dead_characters[$i].side].tongue_of_mockery}
{VARIABLE_OP inventory[$side_number].unlit_lantern add $inventory[$dead_characters[$i].side].unlit_lantern}
[if]
	{BOB_CONDITION inventory[$dead_characters[$i].side].walking_boots greater_than_equal_to 1}
	[then]
		{BOB_MODIFY_MOVEMENT x=$x1 y=$y1 1}
		{VARIABLE_OP inventory[$side_number].walking_boots add $inventory[$dead_characters[$i].side].walking_boots}
	[/then]
[/if]
[if]
	{BOB_CONDITION inventory[$dead_characters[$i].side].elven_boots greater_than_equal_to 1}
	[then]
		{BOB_MODIFY_MOVEMENT x=$x1 y=$y1 2}
		{VARIABLE_OP inventory[$side_number].elven_boots add $inventory[$dead_characters[$i].side].elven_boots}
	[/then]
[/if]
[if]
	{BOB_CONDITION inventory[$dead_characters[$i].side].nim_boots greater_than_equal_to 1}
	[then]
		{BOB_MODIFY_SINGLE_DEFENCE x,y=$x1,$y1 flat -10}
		{VARIABLE_OP inventory[$side_number].nim_boots add $inventory[$dead_characters[$i].side].nim_boots}
	[/then]
[/if]
{VARIABLE_OP inventory[$side_number].snow_shoes add $inventory[$dead_characters[$i].side].snow_shoes}
# Inventory: Rings
[if]
	{BOB_CONDITION inventory[$dead_characters[$i].side].fire_ring greater_than_equal_to 1}
	[then]
	{BOB_MODIFY_RESISTANCE x=$x1 y=$y1 fire -20}
	{VARIABLE_OP inventory[$side_number].fire_ring add $inventory[$dead_characters[$i].side].fire_ring}
	[/then]
[/if]
[if]
	{BOB_CONDITION inventory[$dead_characters[$i].side].water_ring greater_than_equal_to 1}
	[then]
	{BOB_MODIFY_RESISTANCE x=$x1 y=$y1 cold -20}
	{VARIABLE_OP inventory[$side_number].water_ring add $inventory[$dead_characters[$i].side].water_ring}
	[/then]
[/if]
[if]
	{BOB_CONDITION inventory[$dead_characters[$i].side].sky_ring greater_than_equal_to 1}
	[then]
	{BOB_MODIFY_RESISTANCE x=$x1 y=$y1 arcane -20}
	{VARIABLE_OP inventory[$side_number].sky_ring add $inventory[$dead_characters[$i].side].sky_ring}
	[/then]
[/if]
[if]
	{BOB_CONDITION inventory[$dead_characters[$i].side].earth_ring greater_than_equal_to 1}
	[then]
	{BOB_MODIFY_RESISTANCE x=$x1 y=$y1 impact -20}
	{VARIABLE_OP inventory[$side_number].earth_ring add $inventory[$dead_characters[$i].side].earth_ring}
	[/then]
[/if]
[if]
	{BOB_CONDITION inventory[$dead_characters[$i].side].ring_of_swiftness greater_than_equal_to 1}
	[then]
	{BOB_MODIFY_MOVEMENT x=$x1 y=$y1 1}
	{VARIABLE_OP inventory[$side_number].ring_of_swiftness add $inventory[$dead_characters[$i].side].ring_of_swiftness}
	[/then]
[/if]
{VARIABLE_OP inventory[$side_number].gold_ring add $inventory[$dead_characters[$i].side].gold_ring}
# Inventory: Raw Materials
{VARIABLE_OP inventory[$side_number].clay add $inventory[$dead_characters[$i].side].clay}
{VARIABLE_OP inventory[$side_number].ulox_rock add $inventory[$dead_characters[$i].side].ulox_rock}
{VARIABLE_OP inventory[$side_number].gold_nugget add $inventory[$dead_characters[$i].side].gold_nugget}
{VARIABLE_OP inventory[$side_number].slime add $inventory[$dead_characters[$i].side].slime}
{VARIABLE_OP inventory[$side_number].scorpion_tail add $inventory[$dead_characters[$i].side].scorpion_tail}
{VARIABLE_OP inventory[$side_number].yoll_tree_bark add $inventory[$dead_characters[$i].side].yoll_tree_bark}
{VARIABLE_OP inventory[$side_number].huanti_leaves add $inventory[$dead_characters[$i].side].huanti_leaves}
{VARIABLE_OP inventory[$side_number].dragon_tail add $inventory[$dead_characters[$i].side].dragon_tail}
{VARIABLE_OP inventory[$side_number].fang add $inventory[$dead_characters[$i].side].fang}
{VARIABLE_OP inventory[$side_number].skull add $inventory[$dead_characters[$i].side].skull}
{VARIABLE_OP inventory[$side_number].lizard_tail add $inventory[$dead_characters[$i].side].lizard_tail}
# Inventory: Traps
{VARIABLE_OP inventory[$side_number].bomb add $inventory[$dead_characters[$i].side].bomb}
{VARIABLE_OP inventory[$side_number].net add $inventory[$dead_characters[$i].side].net}
{VARIABLE_OP inventory[$side_number].poison add $inventory[$dead_characters[$i].side].poison}
# Inventory: Melee Weapons
{VARIABLE_OP inventory[$side_number].sword add $inventory[$dead_characters[$i].side].sword}
{VARIABLE_OP inventory[$side_number].elven_sword add $inventory[$dead_characters[$i].side].elven_sword}
{VARIABLE_OP inventory[$side_number].saber add $inventory[$dead_characters[$i].side].saber}
{VARIABLE_OP inventory[$side_number].spear add $inventory[$dead_characters[$i].side].spear}
{VARIABLE_OP inventory[$side_number].axe add $inventory[$dead_characters[$i].side].axe}
{VARIABLE_OP inventory[$side_number].hammer add $inventory[$dead_characters[$i].side].hammer}
{VARIABLE_OP inventory[$side_number].dagger add $inventory[$dead_characters[$i].side].dagger}
{VARIABLE_OP inventory[$side_number].mace add $inventory[$dead_characters[$i].side].mace}
{VARIABLE_OP inventory[$side_number].staff add $inventory[$dead_characters[$i].side].staff}
{VARIABLE_OP inventory[$side_number].elven_staff add $inventory[$dead_characters[$i].side].elven_staff}
{VARIABLE_OP inventory[$side_number].quarterstaff add $inventory[$dead_characters[$i].side].quarterstaff}
# Inventory: Ranged Weapons
{VARIABLE_OP inventory[$side_number].bow add $inventory[$dead_characters[$i].side].bow}
{VARIABLE_OP inventory[$side_number].elven_bow add $inventory[$dead_characters[$i].side].elven_bow}
{VARIABLE_OP inventory[$side_number].javelin add $inventory[$dead_characters[$i].side].javelin}
{VARIABLE_OP inventory[$side_number].crossbow add $inventory[$dead_characters[$i].side].crossbow}
{VARIABLE_OP inventory[$side_number].hatchet add $inventory[$dead_characters[$i].side].hatchet}
{VARIABLE_OP inventory[$side_number].knife add $inventory[$dead_characters[$i].side].knife}
# Inventory: Novel Weapons

{VARIABLE_OP inventory[$side_number].salamander_blade add $inventory[$dead_characters[$i].side].salamander_blade}
{VARIABLE_OP inventory[$side_number].holy_sword add $inventory[$dead_characters[$i].side].holy_sword}
{VARIABLE_OP inventory[$side_number].slayer add $inventory[$dead_characters[$i].side].slayer}

{VARIABLE_OP inventory[$side_number].battle_axe add $inventory[$dead_characters[$i].side].battle_axe}
{VARIABLE_OP inventory[$side_number].thunder_axe add $inventory[$dead_characters[$i].side].thunder_axe}

{VARIABLE_OP inventory[$side_number].barbed_spear add $inventory[$dead_characters[$i].side].barbed_spear}
{VARIABLE_OP inventory[$side_number].enchanted_spear add $inventory[$dead_characters[$i].side].enchanted_spear}
{VARIABLE_OP inventory[$side_number].lance add $inventory[$dead_characters[$i].side].lance}

{VARIABLE_OP inventory[$side_number].ice_rod add $inventory[$dead_characters[$i].side].ice_rod}
{VARIABLE_OP inventory[$side_number].plague_staff add $inventory[$dead_characters[$i].side].plague_staff}
{VARIABLE_OP inventory[$side_number].smasher add $inventory[$dead_characters[$i].side].smasher}
{VARIABLE_OP inventory[$side_number].nipper add $inventory[$dead_characters[$i].side].nipper}

{VARIABLE_OP inventory[$side_number].storm_bow add $inventory[$dead_characters[$i].side].storm_bow}
{VARIABLE_OP inventory[$side_number].frost_bow add $inventory[$dead_characters[$i].side].frost_bow}
{VARIABLE_OP inventory[$side_number].fire_bow add $inventory[$dead_characters[$i].side].fire_bow}
{VARIABLE_OP inventory[$side_number].tomahawk add $inventory[$dead_characters[$i].side].tomahawk}
{VARIABLE_OP inventory[$side_number].feathered_javelin add $inventory[$dead_characters[$i].side].feathered_javelin}
{VARIABLE_OP inventory[$side_number].heavy_crossbow add $inventory[$dead_characters[$i].side].heavy_crossbow}
{VARIABLE_OP inventory[$side_number].customised_sling add $inventory[$dead_characters[$i].side].customised_sling}


                    # ...and when you're done, clear this dead character so
                    # stepping on this location doesn't trigger this event
                    # anymore
                   
                    {CLEAR_VARIABLE dead_characters[$i]}
                   
                    # a simple way I tend to use to terminate a FOREACH loop:
                   
                    {VARIABLE i 9999}
                [/then]
            [/if]
        {NEXT i}

    [/event]
#enddef


####################################################################################
# Animation Macros
####################################################################################
  

#define BOB_SUB_FRAME_LIGHTNING VARIATION DIR HALO_X HALO_Y COND
	[{COND}]
		hits=no
		direction={DIR}
		[frame]
			begin=-300
			end=-200
			halo=halo/lightning-bolt-{VARIATION}-1.png
			halo_x,halo_y={HALO_X},{HALO_Y}
			sound=lightning-miss.ogg
		[/frame]
		[frame]
			begin=-200
			end=-100
			halo=halo/lightning-bolt-{VARIATION}-2.png
			halo_x,halo_y={HALO_X},{HALO_Y}
		[/frame]
		[frame]
			begin=-100
			end=0
			halo=halo/lightning-bolt-{VARIATION}-4.png
			halo_x,halo_y={HALO_X},{HALO_Y}
		[/frame]
		[frame]
			begin=0
			end=100
			halo=misc/blank-hex.png
			halo_x,halo_y={HALO_X},{HALO_Y}
		[/frame]
	[/{COND}]
	[else]
		hits=yes
		direction={DIR}
		[frame]
			begin=-300
			end=-200
			halo=halo/lightning-bolt-{VARIATION}-1.png
			halo_x,halo_y={HALO_X},{HALO_Y}
			sound=lightning.ogg
		[/frame]
		[frame]
			begin=-200
			end=-100
			halo=halo/lightning-bolt-{VARIATION}-2.png
			halo_x,halo_y={HALO_X},{HALO_Y}
		[/frame]
		[frame]
			begin=-100
			end=100
			halo=halo/lightning-bolt-{VARIATION}-3.png
			halo_x,halo_y={HALO_X},{HALO_Y}
		[/frame]
		[frame]
			begin=100
			end=200
			halo=halo/lightning-bolt-{VARIATION}-4.png
			halo_x,halo_y={HALO_X},{HALO_Y}
		[/frame]
		[frame]
			begin=200
			end=250
			halo=misc/blank-hex.png
			halo_x,halo_y={HALO_X},{HALO_Y}
		[/frame]
	[/else]
#enddef

#define BOB_SUB_ANIM_LIGHTNING VARIATION
	[attack_anim]
		[filter_attack]
			name=Lightning
		[/filter_attack]
		#dummy missile frame to block the sliding otherwise
		[missile_frame]
			begin=-100
			end=0
		[/missile_frame]
		{BOB_SUB_FRAME_LIGHTNING {VARIATION} n 0 -210 if}
		{BOB_SUB_FRAME_LIGHTNING {VARIATION} s 0 -72 else}
		{BOB_SUB_FRAME_LIGHTNING {VARIATION} se,sw 54 -104 else}
		{BOB_SUB_FRAME_LIGHTNING {VARIATION} ne,nw 54 -176 else}
	[/attack_anim]
#enddef

#define BOB_ANIM_LIGHTNING
	{BOB_SUB_ANIM_LIGHTNING 1}
	{BOB_SUB_ANIM_LIGHTNING 2}
	{BOB_SUB_ANIM_LIGHTNING 3}
#enddef

	####################################################################################
	# Dead bodies
	####################################################################################

#define BOB_PLACE_CORPSE	
	[event]
	name=die
	first_time_only=no
		[filter]
			[filter_location]
				[not]
					terrain=Wo,Wog,Wot,Ww,Wwg,Wwt,Ss,*^V*,Gg^Wm,Ww^Ewl,Ww^Ewf,Qlf,Ql,Qxe,Qxua,Qxu
                [/not]
            [/filter_location]
            [and]
				race=human
				[or]
					race=elf
				[/or]
				[or]
					race=dwarf
				[/or]
				[or]
					race=orc
				[/or]
				[or]
					race=goblin
				[/or]
				[or]
					race=lizard
				[/or]
				[or]
					race=ogre
				[/or]
				[or]
					race="dark elf"
				[/or]
				[or]
					race=kalifa
				[/or]
				[or]
					race=sidhe
				[/or]
				[or]
					race=aragwaith
				[/or]
				[or]
					race=calydonianrace
				[/or]
				[or]
					race=lavinian
				[/or]
				[or]
					race=nemidian
				[/or]
			[/and]
		[/filter]
		
		[store_locations]
			variable=corpse_xy
			find_in=corpse_xy
			[or]
				x,y=$x1,$y1
			[/or]
		[/store_locations]
 
		[if]
			{BOB_CONDITION turn_number greater_than_equal_to 1}
			[then]
				[switch]
					variable=unit.type
					
					# Humans
					[case]
					value=Cavalryman,Dragoon,Cavalier
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-loyalists/cavalryman-die-2 $unit.side}
					[/case]
					[case]
					value=Horseman,Lancer,Knight
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-loyalists/horseman-se-die5 $unit.side}
					[/case]
					[case]
					value=Fencer,Master at Arms,Duelist
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-loyalists/fencer-die5 $unit.side}
					[/case]
					[case]
					value=Sergeant,Lieutenant,General,Grand Marshal
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-loyalists/lieutenant-die-9 $unit.side}
					[/case]
					[case]
					value=Pikeman
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-loyalists/pikeman-die-5 $unit.side}
					[/case]
					[case]
					value=Spearman
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-loyalists/spearman-death4 $unit.side}
					[/case]
					[case]
					value=Rogue
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-outlaws/rogue-die-6 $unit.side}
						[if]
							{BOB_CONDITION unit.gender equals female}
							[then]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-outlaws/rougue+female-die-6 $unit.side}
							[/then]
							[else]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-outlaws/rogue-die-7 $unit.side}
							[/else]
						[/if]
					[/case]
					[case]
					value=Thief
						[if]
							{BOB_CONDITION unit.gender equals female}
							[then]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-outlaws/thief+female-die-7 $unit.side}
							[/then]
							[else]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-outlaws/thief-die-7 $unit.side}
							[/else]
						[/if]
					[/case]
					[case]
					value=Trapper,Huntsman
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/human-outlaws/trapper-die-8 $unit.side}
					[/case]
					[case]
						value=Dark Adept,Dark Sorcerer,Necromancer
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/undead-necromancers/adept-die8 $unit.side}
					[/case]
					
					# Elves
					
					[case]
					value=Elvish Fighter,Elvish Archer,Elvish Scout
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/elves-wood/archer-die4 $unit.side}
					[/case]
					[case]
					value=Elvish Ranger,Elvish Rider
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/elves-wood/ranger-die4 $unit.side}
					[/case]
					[case]
					value=Elvish Avenger,Elvish Outrider,Elvish Captain,Elvish Hero,Elvish Champion,Elvish Marshal
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/elves-wood/avenger-die4 $unit.side}
					[/case]
					[case]
					value=Elvish Marksman
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/elves-wood/marksman-die-5 $unit.side}
					[/case]
					[case]
					value=Elvish Sharpshooter
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/elves-wood/sharpshooter-die4 $unit.side}
					[/case]
					[case]
					value=Elvish Lord,Elvish High Lord
						{BOB_PLACE_IMAGE_TC $x1 $y1 items/corpse-elf $unit.side}
					[/case]
					
					# Orcs
					[case]
					value=Orcish Assassin,Orcish Slayer
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/orcs/assassin-die-10 $unit.side}
					[/case]
					[case]
					value=Orcish Grunt,Orcish Warrior,Orcish Warlord
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/orcs/grunt-die-6 $unit.side}
					[/case]
					
					# Goblins
					[case]
					value=Goblin Spearman,Goblin Impaler,Goblin Rouser
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/goblins/impaler-death-9 $unit.side}
					[/case]
							
					# Dwarves
					[case]
					value=Dwarvish Thunderer,Dwarvish Thunderguard
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/dwarves/thunderer-die3 $unit.side}
					[/case]
					
					# Saurians
					[case]
					value=Saurian Ambusher
						[if]
							{BOB_CONDITION unit.facing equals n}
							[or]
								{BOB_CONDITION unit.facing equals ne}	
							[/or]
							[or]
								{BOB_CONDITION unit.facing equals nw}
							[/or]
							[then]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/ambusher/ambusher-ne-die4 $unit.side}
							[/then]
							[else]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/ambusher/ambusher-se-die4 $unit.side}
							[/else]
						[/if]
					[/case]
					[case]
					value=Saurian Augur
						[if]
							{BOB_CONDITION unit.facing equals n}
							[or]
								{BOB_CONDITION unit.facing equals ne}	
							[/or]
							[or]
								{BOB_CONDITION unit.facing equals nw}
							[/or]
							[then]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/augur/augur-ne-die4 $unit.side}
							[/then]
							[else]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/augur/augur-se-die4 $unit.side}
							[/else]
						[/if]
					[/case]
					[case]
					value=Saurian Flanker
						[if]
							{BOB_CONDITION unit.facing equals n}
							[or]
								{BOB_CONDITION unit.facing equals ne}	
							[/or]
							[or]
								{BOB_CONDITION unit.facing equals nw}
							[/or]
							[then]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/flanker/flanker-ne-die4 $unit.side}
							[/then]
							[else]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/flanker/flanker-se-die4 $unit.side}
							[/else]
						[/if]
					[/case]
					[case]
					value=Saurian Oracle
						[if]
							{BOB_CONDITION unit.facing equals n}
							[or]
								{BOB_CONDITION unit.facing equals ne}	
							[/or]
							[or]
								{BOB_CONDITION unit.facing equals nw}
							[/or]
							[then]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/oracle/oracle-ne-die4 $unit.side}
							[/then]
							[else]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/oracle/oracle-se-die4 $unit.side}
							[/else]
						[/if]
					[/case]
					[case]
					value=Saurian Skirmisher
						[if]
							{BOB_CONDITION unit.facing equals n}
							[or]
								{BOB_CONDITION unit.facing equals ne}	
							[/or]
							[or]
								{BOB_CONDITION unit.facing equals nw}
							[/or]
							[then]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/skirmisher/skirmisher-ne-die4 $unit.side}
							[/then]
							[else]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/skirmisher/skirmisher-se-die4 $unit.side}
							[/else]
						[/if]
					[/case]
					[case]
					value=Saurian Soothsayer
						[if]
							{BOB_CONDITION unit.facing equals n}
							[or]
								{BOB_CONDITION unit.facing equals ne}	
							[/or]
							[or]
								{BOB_CONDITION unit.facing equals nw}
							[/or]
							[then]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/soothsayer/soothsayer-ne-die4 $unit.side}
							[/then]
							[else]
								{BOB_PLACE_IMAGE_TC $x1 $y1 units/saurians/soothsayer/soothsayer-se-die4 $unit.side}
							[/else]
						[/if]
					[/case]
					
					# Generic Skeletons
					[case]
					value=Woodsman,Bowman,Poacher,Longbowman,Master Bowman,Orcish Archer,Orcish Crossbowman,Orcish Slurbow
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/undead-skeletal/archer-die-13 $unit.side}
					[/case]
					[case]
					value=Halberdier,Dwarvish Ulfserker,Dwarvish Berserker
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/undead-skeletal/revenant-dying-7 $unit.side}
					[/case]
					[case]
					value=Orcish Sovereign,Orcish Ruler,Orcish Leader
						{BOB_PLACE_IMAGE_TC $x1 $y1 units/undead-skeletal/deathblade-dying-7 $unit.side}
					[/case]
					
					# Everything else
					[else]
						{PLACE_IMAGE items/bones.png $x1 $y1}
					[/else]
				[/switch]
			[/then]
		[/if]
	[/event]
#enddef

#define BOB_TALENT_SCAVENGER
[event]
name=moveto
first_time_only=no
	[filter]
		canrecruit=yes
		[filter_location]
			find_in=corpse_xy
		[/filter_location]
		[filter_wml]
			[modifications]
				[trait]
					id=scavenger
				[/trait]
			[/modifications]
		[/filter_wml]
	[/filter]
	{BOB_PRINT ("$character[$side_number].name has picked up a poison trap")}
	{BOB_SOUND skeleton-hit-2.ogg}
	{VARIABLE_OP inventory[$side_number].poison add 1}
	{REMOVE_IMAGE $x1 $y1}
	[store_locations]
		variable=corpse_xy
		find_in=corpse_xy
		[not]
			x,y=$x1,$y1
		[/not]
	[/store_locations]
[/event]
#enddef